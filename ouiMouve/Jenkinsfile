pipeline {
    agent any
    tools {
            jdk 'JDK21'
    }
    environment {
        IMAGE_NAME = 'ouimouve-image'
        CONTAINER_NAME = 'ouimouve-container-prod'
        JAVA_TOOL_OPTIONS = '-Dfile.encoding=UTF-8'
        SONARQUBE_ENV = 'SonarEnv'

    }

    stages {

        stage('Exécuter les test unitaires et intégration de Jacoco'){
            steps {
                script {
                    try {
                        dir('ouiMouve') {
                            // Ajout de jacoco:prepare-agent et jacoco:report
                            sh 'mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install org.jacoco:jacoco-maven-plugin:report -Dspring.profiles.active=test'
                        }
                    } catch (Exception e) {
                        error "Échec de l'exécution des tests Maven : ${e.message}"
                    }
                }
            }
        }
        stage('Effectuer une analyse de qualité et de sécurtité du code avec SonarQube et analyse de la couverture du code'){
            steps {
                script {
                    try {
                        dir('ouiMouve') {
                            withSonarQubeEnv("${env.SONARQUBE_ENV}") {
                            // Ajout de la propriété pour le rapport Jacoco
                            sh '''
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=Projet-Fil-Rouge \
                                    -Dsonar.projectName='Projet Fil Rouge' \
                                    -Dsonar.host.url=http://host.docker.internal:9000 \
                                    -Dsonar.java.coveragePlugin=jacoco \
                                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

                            '''
                            }
                        }
                    } catch (Exception e) {
                        error "Échec de l'analyse Sonar : ${e.message}"
                    }
                }
            }
        }
        stage('Merge des changements sur la branche main') {
            steps {
                script {
                    def choix = input (
                         message :' Voulez-vous faire un merge vers Main ?',
                        parameters : [
                           choice(name: 'Confirmation', choices: ['Oui', 'Non'], description: 'Confirmer le merge')
                        ]
                    )
                    if (choix != 'Oui') {
                        error "Merge annulé par l'utilisateur."
                    } else {
                    withCredentials([usernamePassword(credentialsId: 'GitHub_Pat', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {    
                        sh '''
                            git config user.email "h.hassen.malek@gmail.com"
                            git config user.name "HhassenMALEK"
                            git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/HhassenMALEK/ProjetFileRouge_Gestion_De_Transport.git
                            git checkout main
                            git pull origin main 
                            git merge origin/dev --no-ff -m "merge automatique de dev vers main"
                            git push origin main
                            echo "Merge effectué avec succès"
                            '''
                        }
                    }
                }    
            }  
        }

    }
    post {
        success {
            echo "Pipeline terminé avec succès : l'application est déployée sur http://localhost:8081"
        }
        failure {
            echo "Le pipeline a échoué, veuillez consulter les logs pour plus de détails"
        }
        always {
            echo "Fin de l'exécution du pipeline"
        }
    }
}
