/**
 * OuiMouve API
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { CarPoolingCreateDto } from '../model/carPoolingCreateDto';
// @ts-ignore
import { CarPoolingResponseDto } from '../model/carPoolingResponseDto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { BaseService } from '../api.base.service';

@Injectable({
  providedIn: 'root',
})
export class CarPoolingControllerService extends BaseService {
  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration?: Configuration
  ) {
    super(basePath, configuration);
  }

  /**
   * @param carPoolingCreateDto
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createCarPooling(
    carPoolingCreateDto: CarPoolingCreateDto,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<CarPoolingResponseDto>;
  public createCarPooling(
    carPoolingCreateDto: CarPoolingCreateDto,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpResponse<CarPoolingResponseDto>>;
  public createCarPooling(
    carPoolingCreateDto: CarPoolingCreateDto,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpEvent<CarPoolingResponseDto>>;
  public createCarPooling(
    carPoolingCreateDto: CarPoolingCreateDto,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<any> {
    if (carPoolingCreateDto === null || carPoolingCreateDto === undefined) {
      throw new Error(
        'Required parameter carPoolingCreateDto was null or undefined when calling createCarPooling.'
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (bearerAuth) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'bearerAuth',
      'Authorization',
      localVarHeaders,
      'Bearer '
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['*/*']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected
      );
    }

    const localVarHttpContext: HttpContext =
      options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Content-Type',
        httpContentTypeSelected
      );
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/carpooling`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<CarPoolingResponseDto>(
      'post',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: carPoolingCreateDto,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteCarPooling(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: undefined;
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<any>;
  public deleteCarPooling(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: undefined;
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpResponse<any>>;
  public deleteCarPooling(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: undefined;
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpEvent<any>>;
  public deleteCarPooling(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: undefined;
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling deleteCarPooling.'
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (bearerAuth) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'bearerAuth',
      'Authorization',
      localVarHeaders,
      'Bearer '
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([]);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected
      );
    }

    const localVarHttpContext: HttpContext =
      options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/carpooling/${this.configuration.encodeParam({
      name: 'id',
      value: id,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'number',
      dataFormat: 'int64',
    })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<any>(
      'delete',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param organizerId
   * @param status
   * @param startDate
   * @param endDate
   * @param nameDeparture
   * @param nameDestination
   * @param vehicleId
   * @param capacity
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public filterByCriteria(
    organizerId?: number,
    status?:
      | 'IN_PROGRESS'
      | 'FINISHED'
      | 'CANCELLED'
      | 'BOOKING_OPEN'
      | 'BOOKING_FULL',
    startDate?: string,
    endDate?: string,
    nameDeparture?: string,
    nameDestination?: string,
    vehicleId?: number,
    capacity?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<Array<CarPoolingResponseDto>>;
  public filterByCriteria(
    organizerId?: number,
    status?:
      | 'IN_PROGRESS'
      | 'FINISHED'
      | 'CANCELLED'
      | 'BOOKING_OPEN'
      | 'BOOKING_FULL',
    startDate?: string,
    endDate?: string,
    nameDeparture?: string,
    nameDestination?: string,
    vehicleId?: number,
    capacity?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpResponse<Array<CarPoolingResponseDto>>>;
  public filterByCriteria(
    organizerId?: number,
    status?:
      | 'IN_PROGRESS'
      | 'FINISHED'
      | 'CANCELLED'
      | 'BOOKING_OPEN'
      | 'BOOKING_FULL',
    startDate?: string,
    endDate?: string,
    nameDeparture?: string,
    nameDestination?: string,
    vehicleId?: number,
    capacity?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpEvent<Array<CarPoolingResponseDto>>>;
  public filterByCriteria(
    organizerId?: number,
    status?:
      | 'IN_PROGRESS'
      | 'FINISHED'
      | 'CANCELLED'
      | 'BOOKING_OPEN'
      | 'BOOKING_FULL',
    startDate?: string,
    endDate?: string,
    nameDeparture?: string,
    nameDestination?: string,
    vehicleId?: number,
    capacity?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    localVarQueryParameters = this.addToHttpParams(
      localVarQueryParameters,
      <any>organizerId,
      'organizerId'
    );
    localVarQueryParameters = this.addToHttpParams(
      localVarQueryParameters,
      <any>status,
      'status'
    );
    localVarQueryParameters = this.addToHttpParams(
      localVarQueryParameters,
      <any>startDate,
      'startDate'
    );
    localVarQueryParameters = this.addToHttpParams(
      localVarQueryParameters,
      <any>endDate,
      'endDate'
    );
    localVarQueryParameters = this.addToHttpParams(
      localVarQueryParameters,
      <any>nameDeparture,
      'nameDeparture'
    );
    localVarQueryParameters = this.addToHttpParams(
      localVarQueryParameters,
      <any>nameDestination,
      'nameDestination'
    );
    localVarQueryParameters = this.addToHttpParams(
      localVarQueryParameters,
      <any>vehicleId,
      'vehicleId'
    );
    localVarQueryParameters = this.addToHttpParams(
      localVarQueryParameters,
      <any>capacity,
      'capacity'
    );

    let localVarHeaders = this.defaultHeaders;

    // authentication (bearerAuth) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'bearerAuth',
      'Authorization',
      localVarHeaders,
      'Bearer '
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['*/*']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected
      );
    }

    const localVarHttpContext: HttpContext =
      options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/carpooling/filter`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<Array<CarPoolingResponseDto>>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAll(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<Array<CarPoolingResponseDto>>;
  public getAll(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpResponse<Array<CarPoolingResponseDto>>>;
  public getAll(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpEvent<Array<CarPoolingResponseDto>>>;
  public getAll(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    // authentication (bearerAuth) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'bearerAuth',
      'Authorization',
      localVarHeaders,
      'Bearer '
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['*/*']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected
      );
    }

    const localVarHttpContext: HttpContext =
      options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/carpooling/list`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<Array<CarPoolingResponseDto>>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getById(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<CarPoolingResponseDto>;
  public getById(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpResponse<CarPoolingResponseDto>>;
  public getById(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpEvent<CarPoolingResponseDto>>;
  public getById(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getById.'
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (bearerAuth) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'bearerAuth',
      'Authorization',
      localVarHeaders,
      'Bearer '
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['*/*']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected
      );
    }

    const localVarHttpContext: HttpContext =
      options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/carpooling/${this.configuration.encodeParam({
      name: 'id',
      value: id,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'number',
      dataFormat: 'int64',
    })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<CarPoolingResponseDto>(
      'get',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param carPoolingCreateDto
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateCarPooling(
    id: number,
    carPoolingCreateDto: CarPoolingCreateDto,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<CarPoolingResponseDto>;
  public updateCarPooling(
    id: number,
    carPoolingCreateDto: CarPoolingCreateDto,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpResponse<CarPoolingResponseDto>>;
  public updateCarPooling(
    id: number,
    carPoolingCreateDto: CarPoolingCreateDto,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<HttpEvent<CarPoolingResponseDto>>;
  public updateCarPooling(
    id: number,
    carPoolingCreateDto: CarPoolingCreateDto,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: '*/*';
      context?: HttpContext;
      transferCache?: boolean;
    }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling updateCarPooling.'
      );
    }
    if (carPoolingCreateDto === null || carPoolingCreateDto === undefined) {
      throw new Error(
        'Required parameter carPoolingCreateDto was null or undefined when calling updateCarPooling.'
      );
    }

    let localVarHeaders = this.defaultHeaders;

    // authentication (bearerAuth) required
    localVarHeaders = this.configuration.addCredentialToHeaders(
      'bearerAuth',
      'Authorization',
      localVarHeaders,
      'Bearer '
    );

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['*/*']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected
      );
    }

    const localVarHttpContext: HttpContext =
      options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Content-Type',
        httpContentTypeSelected
      );
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/api/carpooling/${this.configuration.encodeParam({
      name: 'id',
      value: id,
      in: 'path',
      style: 'simple',
      explode: false,
      dataType: 'number',
      dataFormat: 'int64',
    })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<CarPoolingResponseDto>(
      'patch',
      `${basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: carPoolingCreateDto,
        responseType: <any>responseType_,
        ...(withCredentials ? { withCredentials } : {}),
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      }
    );
  }
}
